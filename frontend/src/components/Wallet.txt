import { LogMessage, ChannelState, WalletState } from '../types';
import { useState } from "react";


export function Wallet() 
  const [wallet1Passphrase, setWallet1Passphrase] = useState<string>('');
  const [wallet2Passphrase, setWallet2Passphrase] = useState<string>('');
  const [wallet1, setWallet1] = useState<WalletState | null>(null);
  const [wallet2, setWallet2] = useState<WalletState | null>(null);
  const [channel1, setChannel1] = useState<ChannelState | null>(null);
  const [channel2, setChannel2] = useState<ChannelState | null>(null);
  const [amount, setAmount] = useState<number>(0);
  const [logs, setLogs] = useState<LogMessage[]>([]);

  const addLog = (message: string) => {
    setLogs(prev => [...prev, {
      timestamp: new Date().toLocaleTimeString(),
      message
    }]);
  };

  const initializeChannels = async () => 
    try {
      const response = await fetch('/api/init-channels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          network: 'regtest',
          initial_balance: 1000,
          security_bits: 256
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to initialize channels');
      }

    
  const createWallet = async (channelId: number, passphrase: string) => {
    const response = await fetch('/api/create-wallet', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        channelId,
        passphrase,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to create wallet');
    }

    return await response.json();
  };

  const performTransfer = async (channelId: number, amount: number) => {
    const response = await fetch('/api/transfer', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        channelId,
        amount,
      }),
    });

    if (!response.ok) {
      throw new Error('Failed to perform transfer');
    }

    return await response.json();
  };

  return (
    <div className="min-h-screen p-8 bg-gray-900">      
      <div className="max-w-4xl mx-auto space-y-8">
        {/* Header */}
        <div className="text-center">
          <h1 className="text-3xl font-bold text-white">Overpass Channel Test</h1>
          <p className="mt-2 text-gray-400">Test implementation for channel operations</p>
        </div>

        {/* Initialize Section */}
        <div className="card">
          <h2 className="text-xl font-semibold mb-4">Initialize</h2>
          <button
            onClick={initializeChannels}
            disabled={Boolean(channel1) || Boolean(channel2)}
            className="btn btn-primary"
          >
            Initialize Channels
          </button>
        </div>

        {/* Wallet Management */}
        <div className="grid grid-cols-2 gap-8">
          {/* Wallet 1 */}
          <div className="card">
            <h2 className="text-xl font-semibold mb-4">Wallet 1</h2>
            <div className="space-y-4">
              <input 
                type="password"
                placeholder="Passphrase"
                className="input w-full"
                onChange={(e) => setWallet1Passphrase(e.target.value)}
              />
              <button 
                className="btn btn-primary w-full"
                onClick={async () => {
                  try {
                    const wallet = await createWallet(1, wallet1Passphrase);
                    setWallet1(wallet);
                    addLog('Wallet 1 created');
                  } catch (error) {
                    const message = error instanceof Error ? error.message : 'Unknown error';
                    addLog(`Error creating wallet 1: ${message}`);
                  }
                }}
                disabled={!channel1 || Boolean(wallet1)}
              >
                Create Wallet
              </button>
            </div>
          </div>

          {/* Wallet 2 */}
          <div className="card">
            <h2 className="text-xl font-semibold mb-4">Wallet 2</h2>
            <div className="space-y-4">
              <input 
                type="password"
                placeholder="Passphrase"
                className="input w-full"
                onChange={(e) => setWallet2Passphrase(e.target.value)}
              />
              <button 
                className="btn btn-primary w-full"
                onClick={async () => {
                  try {
                    const wallet = await createWallet(2, wallet2Passphrase);
                    setWallet2(wallet);
                    addLog('Wallet 2 created');
                  } catch (error) {
                    const message = error instanceof Error ? error.message : 'Unknown error';
                    addLog(`Error creating wallet 2: ${message}`);
                  }
                }}
                disabled={!channel2 || Boolean(wallet2)}
              >
                Create Wallet
              </button>
            </div>
          </div>
        </div>

        {/* Transfer Section */}
        <div className="card">
          <h2 className="text-xl font-semibold mb-4">Transfer</h2>
          <div className="space-y-4">
            <input
              type="number"
              value={amount}
              onChange={(e) => setAmount(parseInt(e.target.value))}
              placeholder="Amount"
              className="input w-full"
            />
            <div className="grid grid-cols-2 gap-4">
              <button
                className="btn btn-primary"
                onClick={async () => {
                  try {
                    await performTransfer(1, amount);
                    addLog(`Transferred ${amount} from Wallet 1`);
                  } catch (error) {
                    const message = error instanceof Error ? error.message : 'Unknown error';
                    addLog(`Error transferring from wallet 1: ${message}`);
                  }
                }}
                disabled={!wallet1}
              >
                Transfer from Wallet 1
              </button>
              <button
                className="btn btn-primary"
                onClick={async () => {
                  try {
                    await performTransfer(2, amount);
                    addLog(`Transferred ${amount} from Wallet 2`);
                  } catch (error) {
                    const message = error instanceof Error ? error.message : 'Unknown error';
                    addLog(`Error transferring from wallet 2: ${message}`);
                  }
                }}
                disabled={!wallet2}
              >
                Transfer from Wallet 2
              </button>
            </div>
          </div>
        </div>

        {/* Logs Section */}
        <div className="card">
          <h2 className="text-xl font-semibold mb-4">Logs</h2>
          <div className="bg-gray-900 rounded-lg p-4 h-64 overflow-y-auto font-mono text-sm">
            {logs.map((log, index) => (
              <div key={index} className="text-gray-300">
                {log.timestamp}: {log.message}
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
export default Wallet;